using System;
using System.IO.Pipes;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal struct Message
{
    public int valueA { get; set; }
    public int valueB { get; set; }
    public int Priority { get; set; }
}

class PipeClient
{
    static void Main(string[] args)
    {
        using (var pipeClient = new NamedPipeClientStream(".", "Lab2", PipeDirection.InOut))
        {
            Console.WriteLine("Client is connecting...");
            pipeClient.Connect();

            Message sentMessage = new Message();

            while (true)
            {
                Console.WriteLine("Enter valueA");
                if (int.TryParse(Console.ReadLine(), out int valueA))
                {
                    sentMessage.valueA = valueA;
                    break;
                }
                else
                {
                    Console.WriteLine("Invalid format");
                }
            }

            while (true)
            {
                Console.WriteLine("Enter valueB");
                if (int.TryParse(Console.ReadLine(), out int valueB))
                {
                    sentMessage.valueB = valueB;
                    break;
                }
                else
                {
                    Console.WriteLine("Invalid format");
                }
            }

            Console.WriteLine("Enter Priority");
            if (int.TryParse(Console.ReadLine(), out int priority))
            {
                sentMessage.Priority = priority;
            }
            else
            {
                Console.WriteLine("Invalid format");
            }

            WriteMessage(pipeClient, sentMessage);

            Message receivedMessage = ReadMessage(pipeClient);
            Console.WriteLine("Received: valueA = {0}, valueB = {1}, Priority = {2}", receivedMessage.valueA, receivedMessage.valueB, receivedMessage.Priority);
        }
    }

    static Message ReadMessage(NamedPipeClientStream pipeStream)
    {
        byte[] buffer = new byte[Unsafe.SizeOf<Message>()];
        pipeStream.Read(buffer, 0, buffer.Length);
        return MemoryMarshal.Read<Message>(buffer);
    }

    static void WriteMessage(NamedPipeClientStream pipeStream, Message message)
    {
        byte[] buffer = new byte[Unsafe.SizeOf<Message>()];

        MemoryMarshal.Write(buffer, ref message);

        pipeStream.Write(buffer, 0, buffer.Length);
        pipeStream.Flush();
    }
}
